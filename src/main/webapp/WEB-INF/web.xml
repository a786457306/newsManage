<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         id="WebApp_ID" version="2.5">

  <display-name>Archetype Created Web Application</display-name>
  <!-- 读取Spring配置文件 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:Spring.xml;
      classpath:Spring-mybatis.xml;
    </param-value>
  </context-param>

  <!-- Spring字符集过滤器 -->
  <filter>
    <filter-name>SpringEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>SpringEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- 登录页面Filter -->

  <!--配置过滤器-->
  <!--<filter>-->
    <!--&lt;!&ndash;用于添加描述信息，该元素的内容可为空，可以不配置。&ndash;&gt;-->
    <!--&lt;!&ndash;<description>这是一个filter</description>&ndash;&gt;-->
    <!--&lt;!&ndash;用于为过滤器指定一个名字，该元素的内容不能为空。&ndash;&gt;-->
    <!--<filter-name>LoginFilter</filter-name>-->
    <!--&lt;!&ndash;用于指定过滤器的完整的限定类名。&ndash;&gt;-->
    <!--<filter-class>com.nenu.newsManage.filter.LoginFilter</filter-class>-->
    <!--&lt;!&ndash;用于为过滤器指定初始化参数，它的子元素<param-name>指定参数的名字，<param-value>指定参数的值。-->
    <!--在过滤器中，可以使用FilterConfig接口对象来访问初始化参数。-->
    <!--如果过滤器不需要指定初始化参数，那么<init-param>元素可以不配置。&ndash;&gt;-->
    <!--<init-param>-->
      <!--<param-name>filterConfig</param-name>-->
      <!--<param-value>value在这里呢</param-value>-->
    <!--</init-param>-->
  <!--</filter>-->

  <!--映射过滤器-->
  <!--用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径-->
  <!--<filter-mapping>-->
    <!--&lt;!&ndash;用于设置filter的注册名称。该值必须是在<filter>元素中声明过的过滤器的名字&ndash;&gt;-->
    <!--<filter-name>LoginFilter</filter-name>-->
    <!--&lt;!&ndash;设置 filter 所拦截的请求路径(过滤器关联的URL样式)。“/*”表示拦截所有的请求 &ndash;&gt;-->
    <!--<url-pattern>/admin/*</url-pattern>-->
    <!--&lt;!&ndash;指定过滤器所拦截的Servlet名称&ndash;&gt;-->
    <!--&lt;!&ndash;<servlet-name>ProductServlet</servlet-name>&ndash;&gt;-->
    <!--&lt;!&ndash;有例子说还有一个disptcher的标签，查了一下，是servlet2.4加进去的，我用的是3.0，似乎已经去掉了这个标签 &ndash;&gt;-->
  <!--</filter-mapping>-->

  <!-- 日志记录 -->
  <context-param>
    <!-- 日志配置文件路径 -->
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
  </context-param>
  <context-param>
    <!-- 日志页面的刷新间隔 -->
    <param-name>log4jRefreshInterval</param-name>
    <param-value>6000</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- SpringMVC核心配置 -->
  <servlet>
    <servlet-name>spring</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:Spring-mvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>spring</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

</web-app>
